generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ControlledValue {
  value   String
  enabled Boolean
}

type WorkInfo {
  companyName String?
  position    String?
  companyUrl  String?
}

model User {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime @default(now())
  firebaseUID     String   @unique
  fullName        String
  username        String   @unique
  title           String?
  bio             String?
  userAccentColor String?
  fcmTokens       String[]

  primaryEmailEnabled Boolean @default(true)
  primaryEmail        String? @unique

  primaryPhoneEnabled Boolean @default(true)
  primaryPhone        String? //@unique

  emails ControlledValue[]
  phones ControlledValue[]

  userType UserType @default(USER)

  birthday DateTime?

  workInfo WorkInfo?

  connectionsReceived  Connection[] @relation("connectionsReceived")
  connectionsInitiated Connection[] @relation("connectionsInitiated")
  connectionsBlocked   Connection[] @relation("connectionsBlocked")

  products Product[] //defined

  links Json?
  linksCategories Json?
  
  apps       Json?
  customApps Json?

  tags Json? //Tag[]

  eventOrganizerId String?         @unique @db.ObjectId //TODO Carefull when building
  eventOrganizer   EventOrganizer? @relation(fields: [eventOrganizerId], references: [id])

  attendedEvents          EventAttendance[]
  reportsAgainst          UserFlagReport[]  @relation("reportedUser")
  reportsSent             UserFlagReport[]  @relation("reportingUser")
  // userDataObjectVersion   String?           @default("v1")
  documentVersion String?           @default("v1")

  @@map("users")
}

model Connection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt  DateTime  @default(now())
  responseAt DateTime?
  seen       Boolean?  @default(false)
  seenAt     DateTime?
  response   String?   @default("pending")

  initiatedByID String @db.ObjectId
  initiatedBy   User   @relation("connectionsInitiated", fields: [initiatedByID], references: [id])

  receivedByID String @db.ObjectId
  receivedBy   User   @relation("connectionsReceived", fields: [receivedByID], references: [id])

  blockerID String? @db.ObjectId
  blocker   User?   @relation("connectionsBlocked", fields: [blockerID], references: [id])

  //@@id([intiatedByID, recievedByID])
  @@map("connections")
}

model Product {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  uuid      String      @unique
  qrUuid    String      @unique
  type      ProductType
  activated Boolean     @default(false)
  ownerID   String?     @db.ObjectId
  owner     User?       @relation(fields: [ownerID], references: [id])

  @@map("products")
}

model Event {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //attending User[] @relation(fields: [id], references: [id])
  date        DateTime?
  duration    Int? // in seconds
  description String?
  name        String
  activated   Boolean           @default(false)
  creatorID   String?           @db.ObjectId
  creator     EventOrganizer?   @relation("eventsCreated", fields: [creatorID], references: [id])
  attendees   EventAttendance[]
  isFeatured  Boolean           @default(false)
  category    String?
  tags        String[]
  eventUrl    String?
  location    GeoPoint?
  address     String?

  @@map("events")
}

model EventAttendance {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  created DateTime @default(now())

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])

  attendeeID String @db.ObjectId
  attendee   User   @relation(fields: [attendeeID], references: [id])

  //@@id([intiatedByID, recievedByID])
  @@map("event-attendance")
}

model EventOrganizer {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())

  user User?

  fullName String

  eventsCreated Event[] @relation("eventsCreated")

  @@map("event-organizer")
}

model UserFlagReport {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String

  reportingUserId String @db.ObjectId
  reportingUser   User   @relation("reportingUser", fields: [reportingUserId], references: [id])

  reportedUserId String @db.ObjectId
  reportedUser   User   @relation("reportedUser", fields: [reportedUserId], references: [id])

  state FlagReportState @default(PENDING)

  @@map("user-flag-reports")
}

enum UserType {
  USER
  ADMIN
  CUSTOMER_SERVICE
  EVENT_ORGANIZER
}

enum FlagReportState {
  PENDING
  RESOLVED
}

enum ProductType {
  CARD
  STICKER
  KEYCHAIN
}

type Tag {
  name String
  ids  String[] @db.ObjectId
}

type GeoPoint {
  lat Float
  lng Float
}
