generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type ControlledValue {
  value   String
  enabled Boolean
}

type WorkInfo {
  companyName   String?
  position  String?
  companyUrl  String?
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  firebaseUID String   @unique
  fullName    String
  username    String? //@unique
  title       String?
  bio         String?

  primaryEmailEnabled Boolean @default(true)
  primaryEmail        String? @unique

  primaryPhoneEnabled Boolean @default(true)
  primaryPhone        String? //@unique

  emails ControlledValue[]
  phones ControlledValue[]

  userType UserType @default(USER)

  birthday             DateTime?

  workInfo  WorkInfo?
  
  connectionsReceived  Connection[] @relation("connectionsReceived")
  connectionsInitiated Connection[] @relation("connectionsInitiated")

  products Product[] //defined

  apps       Json?
  customApps Json?

  tags Json? //Tag[]

  eventsCreated  Event[]           @relation("eventsCreated")
  attendedEvents EventAttendance[]

  @@map("users")
}

model Connection {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  createdAt  DateTime  @default(now())
  responseAt DateTime?
  seen       Boolean?  @default(false)
  seenAt     DateTime?
  response   String?   @default("pending")

  initiatedByID String @db.ObjectId
  initiatedBy   User   @relation("connectionsInitiated", fields: [initiatedByID], references: [id])

  receivedByID String @db.ObjectId
  receivedBy   User   @relation("connectionsReceived", fields: [receivedByID], references: [id])

  //@@id([intiatedByID, recievedByID])
  @@map("connections")
}

model Product {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  uuid      String      @unique
  type      ProductType
  activated Boolean     @default(false)
  ownerID   String?     @db.ObjectId
  owner     User?       @relation(fields: [ownerID], references: [id])

  @@map("products")
}

model Event {
  id          String            @id @default(auto()) @map("_id") @db.ObjectId
  //attending User[] @relation(fields: [id], references: [id])
  date        DateTime?
  description String
  name        String
  activated   Boolean           @default(false)
  creatorID   String            @db.ObjectId
  creator     User              @relation("eventsCreated", fields: [creatorID], references: [id])
  attendees   EventAttendance[]

  @@map("events")
}

model EventAttendance {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  created DateTime @default(now())

  eventId String @db.ObjectId
  event   Event  @relation(fields: [eventId], references: [id])

  attendeeID String @db.ObjectId
  attendee   User   @relation(fields: [attendeeID], references: [id])

  //@@id([intiatedByID, recievedByID])
  @@map("event-attendance")
}

// model  EventOrganizer {
//   id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   createdAt   DateTime @default(now())
  
//   userId      String?


//   fullName    String
//   title       String?
//   bio         String?

//   eventsCreated  Event[]           @relation("eventsCreated")


//   @@map("event-organizer")
// }

enum UserType {
  USER
  ADMIN
  CUSTOMER_SERVICE
  EVENT_ORGANIZER
}

enum ProductType {
  CARD
  STICKER
  KEYCHAIN
}

type Tag {
  name String
  ids  String[] @db.ObjectId
}
